@page "/proportions"
@using NumericalCalculatorPwa.Extensions;

<h1>Proportions</h1>

<GeneralError ErrorMessage="@generalErrorMessage"></GeneralError>

<InfoBar>Put "x" into only one of the fields.</InfoBar>

<div class="ProportionsPage" @onkeypress="HandleProportionsPageKeyPress">
    <div class="form-group">
        <div class="form-row">
            @foreach (var item in proportionInputs)
            {
                <div class="form-group col-6 mb-2">
                    <InputWithValidation Model="item" OnChangeCallback="Validate"></InputWithValidation>
                </div>
            }
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-8 col-sm-9 col-md-10 col-lg-9 col-xl-10">
            <label for="proportionsResult">Result:</label>
            <input id="proportionsResult" type="text" class="form-control" @bind="result">
        </div>
        <div class="form-group col-4 col-sm-3 col-md-2 col-lg-3 col-xl-2 d-flex align-items-end justify-content-end">
            <button class="btn btn-primary" @onclick="Calculate">Calculate</button>
        </div>
    </div>
</div>

@code {
    ValueErrorModel[] proportionInputs = new ValueErrorModel[4].Populate();

    string generalErrorMessage = string.Empty;
    bool isValidationEnabled = false;
    double result = 0;

    public void HandleProportionsPageKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
            Calculate();
    }

    public void Calculate()
    {
        try
        {
            isValidationEnabled = true;

            if (!IsModelValid())
                return;

            var values = GetValues();

            var proportions = new Rychusoft.NumericalLibraries.Calculator.Proportions();
            result = proportions.Compute(values[0], values[1], values[2], values[3]);

            isValidationEnabled = false;
        }
        catch (Exception ex)
        {
            generalErrorMessage = ex.Message;
        }
    }

    public void Validate()
    {
        if (!isValidationEnabled)
            return;

        generalErrorMessage = string.Empty;

        var unknownFieldIndex = -1;

        for (int i = 0; i < 4; i++)
        {
            proportionInputs[i].ErrorMessage = string.Empty;

            if (IsProportionsUnknownValue(proportionInputs[i].Value))
            {
                if (unknownFieldIndex >= 0)
                    proportionInputs[i].ErrorMessage = proportionInputs[unknownFieldIndex].ErrorMessage = "Only one unknown field is allowed";
                else
                    unknownFieldIndex = i;
            }
            else if (!double.TryParse(proportionInputs[i].Value, out _))
            {
                proportionInputs[i].ErrorMessage = "Invalid value";
            }
        }

        if (unknownFieldIndex < 0)
            generalErrorMessage = "Unknown variable is missing. Put 'x' into one of the fields or leave one of them empty.";
    }

    private bool IsProportionsUnknownValue(string value)
    {
        return string.IsNullOrWhiteSpace(value) || value == "x";
    }

    public bool IsModelValid()
    {
        Validate();

        return proportionInputs.All(pi => string.IsNullOrWhiteSpace(pi.ErrorMessage))
            && string.IsNullOrWhiteSpace(generalErrorMessage);
    }

    private double[] GetValues()
    {
        return proportionInputs.Select(pi => ConvertToProportionsDouble(pi.Value)).ToArray();
    }

    private double ConvertToProportionsDouble(string value)
    {
        return IsProportionsUnknownValue(value) ? double.NaN : Convert.ToDouble(value);
    }
}