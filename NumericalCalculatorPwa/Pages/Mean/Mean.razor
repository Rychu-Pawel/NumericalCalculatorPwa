@page "/mean"

@using NumericalCalculatorPwa.Pages.Mean.ViewModels;

<h1>Mean</h1>

<GeneralError ErrorMessage="@generalErrorMessage"></GeneralError>

<div class="MeanPage" @onkeypress="HandlePageKeyPress">
    <div class="form-group row align-items-center">
        <label class="col-12 col-md-4 col-lg-12 col-xl-4 col-form-label">Mean type</label>
        <div class="col-6 col-md-4 col-lg-6 col-xl-4">
            <RadioButton Id="rbArithmetic"
                         Text="Arithmetic"
                         GroupName="rbMeanTypeGroup"
                         Checked="true"
                         OnChangeCallback="(() => { computationType = ComputationType.Arithemtic; })">
            </RadioButton>
        </div>
        <div class="col-6 col-md-4 col-lg-6 col-xl-4">
            <RadioButton Id="rbWeighted"
                         Text="Weighted"
                         GroupName="rbMeanTypeGroup"
                         OnChangeCallback="(() => { computationType = ComputationType.Weighted; })">
            </RadioButton>
        </div>
    </div>
    <div class="form-group">
        @foreach (var item in valueInputs)
        {
            <div class="row mb-2">
                <div class="form-group col">
                    <InputWithValidation Model="item.Value" Placeholder="Value" OnChangeCallback="Validate" OnKeyUpCallback="ManageRowsCount"></InputWithValidation>
                </div>
                <div class="form-group col @(computationType == ComputationType.Weighted ? string.Empty : "d-none")">
                    <InputWithValidation Model="item.Weight" Placeholder="Weight" OnChangeCallback="Validate" OnKeyUpCallback="ManageRowsCount"></InputWithValidation>
                </div>
                <div class="col-1 @(valueInputs.Count > 1 ? string.Empty : "d-none")">
                    <button class="btn btn-link @(IsLastRow(item) ? "d-none" : string.Empty)" @onclick="(() => RemoveRow(item))">
                        <span class="oi oi-trash" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
        }
    </div>
    <div class="form-row">
        <div class="form-group col-8 col-sm-9 col-lg-8">
            <label for="txtResult">Result:</label>
            <input id="txtResult" type="text" class="form-control" @bind="result">
        </div>
        <div class="form-group col-4 col-sm-3 col-lg-4 d-flex align-items-end justify-content-end">
            <button class="btn btn-primary" @onclick="Calculate">Calculate</button>
        </div>
    </div>
</div>

@code {
    List<MeanViewModel> valueInputs = new List<MeanViewModel> { new MeanViewModel() };

    string generalErrorMessage = string.Empty;
    bool isValidationEnabled = false;
    double result = 0;

    enum ComputationType { Arithemtic, Weighted }
    ComputationType computationType = ComputationType.Arithemtic;

    public void HandlePageKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
            Calculate();
    }

    public void Calculate()
    {
        try
        {
            isValidationEnabled = true;

            if (!IsModelValid())
                return;

            var mean = new Rychusoft.NumericalLibraries.Calculator.Mean();

            if (computationType == ComputationType.Arithemtic)
            {
                var values = GetArithemticValues();
                result = mean.ComputeArithmetic(values);
            }
            else
            {
                var values = GetWeightedValues();
                result = mean.ComputeWeighted(values);
            }

            isValidationEnabled = false;
        }
        catch (Exception ex)
        {
            generalErrorMessage = ex.Message;
        }
    }

    public bool IsLastRow(MeanViewModel row)
    {
        return row == valueInputs.Last();
    }

    public void RemoveRow(MeanViewModel row)
    {
        valueInputs.Remove(row);
    }

    private void ManageRowsCount()
    {
        var lastRow = valueInputs.Last();

        if (!IsRowEmpty(lastRow))
            valueInputs.Add(new MeanViewModel());
    }

    private bool IsRowEmpty(MeanViewModel row)
    {
        return string.IsNullOrEmpty(row.Value.Value) && string.IsNullOrEmpty(row.Weight.Value);
    }

    public bool IsModelValid()
    {
        Validate();

        return valueInputs.All(pi => string.IsNullOrWhiteSpace(pi.Value.ErrorMessage) && string.IsNullOrWhiteSpace(pi.Weight.ErrorMessage))
            && string.IsNullOrWhiteSpace(generalErrorMessage);
    }

    public void Validate()
    {
        if (!isValidationEnabled)
            return;

        generalErrorMessage = string.Empty;

        if (valueInputs.Count == 1)
            ValidateRow(valueInputs[0]);

        for (var i = 0; i < valueInputs.Count - 1; i++)
            ValidateRow(valueInputs[i]);
    }

    private void ValidateRow(MeanViewModel row)
    {
        row.Value.ErrorMessage = string.Empty;
        row.Weight.ErrorMessage = string.Empty;

        if (!IsValidDouble(row.Value.Value))
            row.Value.ErrorMessage = "Invalid value";

        if (computationType == ComputationType.Weighted && !IsValidDouble(row.Weight.Value))
            row.Weight.ErrorMessage = "Invalid value";
    }

    private bool IsValidDouble(string value)
    {
        return double.TryParse(value, out _);
    }

    private IEnumerable<double> GetArithemticValues()
    {
        return valueInputs
            .SkipLast(1)
            .Select(v => Convert.ToDouble(v.Value.Value));
    }

    private IEnumerable<double[]> GetWeightedValues()
    {
        return valueInputs
            .SkipLast(1)
            .Select(v => new double[]
            {
                Convert.ToDouble(v.Value.Value),
                Convert.ToDouble(v.Weight.Value)
            });
    }
}