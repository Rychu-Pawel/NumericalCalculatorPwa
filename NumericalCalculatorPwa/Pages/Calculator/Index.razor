@page "/"
@inject IJSRuntime JS

<h1>Calculator</h1>

<GeneralError ErrorMessage="@generalErrorMessage"></GeneralError>

<div class="calculatorPage" @onkeypress="HandleCalculatorPageKeyPress">
    <div class="form-group">
        <div class="form-row d-inline-flex flex-row w-100 flex-nowrap align-items-center" style="gap: 8px">
            <InputWithValidation Model="mainInput" Class="flex-grow-1" OnChangeCallback="Validate" Placeholder="Formula" Autofocus="true"></InputWithValidation>
            <div>
                <button type="button" class="btn btn-link" data-toggle="modal" @onclick="ShowFunctionsExplainedModal">
                    <span class="oi oi-in-circle oi-info" aria-hidden="true"></span>
                </button>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-8 col-sm-9 col-md-10 col-lg-9 col-xl-10">
            <label for="calculatorResult">Result:</label>
            <input id="calculatorResult" type="text" class="form-control" @bind="result">
        </div>
        <div class="form-group col-4 col-sm-3 col-md-2 col-lg-3 col-xl-2 d-flex align-items-end justify-content-end">
            <button class="btn btn-primary" @onclick="Calculate">Calculate</button>
        </div>
    </div>
</div>

<Modal IsOpen="@isModalOpen" IsOpenChanged="OnIsModalOpenChanged">
    <div class="modal-body">
        <pre>
Supported functions:

Sine = <code>sin</code>
Hyperbolic sine = <code>sinh</code>
Cosine = <code>cos</code>
Hyperbolic cosine = <code>cosh</code>
Tangent = <code>tg</code>, <code>tan</code>
Hyperbolic tangent = <code>tgh</code>, <code>tanh</code>
Cotangent = <code>ctg</code>, <code>ctn</code>, <code>cot</code>
Hyperbolic cotangent = <code>ctgh</code>, <code>ctnh</code>, <code>coth</code>
Secant = <code>sec</code>
Cosecant = <code>csc</code>
Arcsine = <code>asin</code>
Arccosine = <code>acos</code>
Arctangent = <code>atg</code>
Arccotangent = <code>actg</code>
Exponential function with e base = <code>exp</code>
Square root = <code>sqrt</code>
Base 2 logarithm = <code>lg</code>
Base e logarithm = <code>ln</code>
Base 10 logarithm = <code>log</code>

Factorial of natural numbers less then 20 is computed with standard formula:
<code>5!</code> = 1*2*3*4*5

Factorial of real numbers and natural numbers greater than 19 is gamma function.

You can use <code>sinx</code> instead of <code>sin(x)</code> but it's not recommended because it can affect the result.
For example <code>sinx+2</code> is <code>sin(x)+2</code> not <code>sin(x+2)</code>.

In function you can use <code>PI</code> and <code>E</code>. <code>PI</code> will be calculated as <code>3.14159265358979</code>,
and <code>E</code> as <code>10</code> raised to the power of that what is after <code>E</code>.
For example: <code>E-05</code> = 10^(-5)

Caution!

In operation arguments in situations when <code>E</code> symbol is used incorrectly it will be treated as
Euler's number (2.71828183). Thanks to that you can integrate from <code>-E</code> to <code>2/3*E</code>

Application ignores spaces in formulas.

Application can't compute imaginary numbers. If during computations
Numrical Calculator encounter imaginary numbers it will return "not a number" result.

You can input nested expressions like <code>sin(cos(30)+tg(sqrt(0,4)))</code>
        </pre>
    </div>
</Modal>

@code {
    ValueErrorModel mainInput = new ValueErrorModel();

    string generalErrorMessage = string.Empty;
    bool isValidationEnabled = false;
    double result = 0;
    bool isModalOpen = false;

    public void ShowFunctionsExplainedModal()
    {
        ToggleModal();
    }

    public void HandleCalculatorPageKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
            Calculate();
    }

    public void Calculate()
    {
        try
        {
            isValidationEnabled = true;

            if (!IsModelValid())
                return;

            var formula = GetFormula();

            var calculator = new Rychusoft.NumericalLibraries.Calculator.Calculator(formula);
            result = calculator.Compute();

            isValidationEnabled = false;
        }
        catch (Exception ex)
        {
            generalErrorMessage = ex.Message;
        }
    }

    public bool IsModelValid()
    {
        Validate();

        return string.IsNullOrWhiteSpace(mainInput.ErrorMessage)
            && string.IsNullOrWhiteSpace(generalErrorMessage);
    }

    public void Validate()
    {
        if (!isValidationEnabled)
            return;

        generalErrorMessage = string.Empty;

        mainInput.ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(mainInput.Value))
            mainInput.ErrorMessage = "Formula is required";
    }

    private string GetFormula()
    {
        return mainInput.Value;
    }

    private void ToggleModal()
    {
        isModalOpen = !isModalOpen;
    }

    private void OnIsModalOpenChanged(bool isOpen)
    {
        this.isModalOpen = isOpen;
    }
}